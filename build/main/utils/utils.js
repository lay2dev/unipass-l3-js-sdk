"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hashData = exports.bnStringToRationalNumber = exports.readBigUInt128LE = exports.readBigUInt64LE = exports.readBigUInt32LE = exports.toBigUInt128LE = exports.toBigUInt64LE = exports.byteArrayToHex = exports.hexToByteArray = exports.rationalNumberToBnString = void 0;
const decimal_js_1 = __importDefault(require("decimal.js"));
const jsbi_1 = __importDefault(require("jsbi"));
const crypto_1 = require("crypto");
exports.rationalNumberToBnString = (rational, decimals) => {
    if (!Number.isInteger(decimals) || decimals < 0) {
        throw new Error("value of 'decimals' must be a natural integer");
    }
    if (decimals === 0)
        return rational;
    if (rational === '0x')
        rational = '0';
    if (typeof rational === 'number') {
        const dp = new decimal_js_1.default(rational).dp();
        rational = Number(rational).toFixed(dp);
    }
    const parts = `${rational}`.split('.');
    if (!!parts[1] && parts[1].length > decimals) {
        throw new Error(`decimals ${decimals} is smaller than the digits number of ${rational}`);
    }
    return `${parts.join('')}${'0'.repeat(decimals - (!!parts[1] ? parts[1].length : 0))}`;
};
function hexToByteArray(h) {
    if (!/^(0x)?([0-9a-fA-F][0-9a-fA-F])*$/.test(h)) {
        throw new Error('Invalid hex string!');
    }
    if (h.startsWith('0x')) {
        h = h.slice(2);
    }
    const array = [];
    while (h.length >= 2) {
        array.push(parseInt(h.slice(0, 2), 16));
        h = h.slice(2);
    }
    return array;
}
exports.hexToByteArray = hexToByteArray;
function byteArrayToHex(a) {
    return '0x' + a.map((i) => ('00' + i.toString(16)).slice(-2)).join('');
}
exports.byteArrayToHex = byteArrayToHex;
function toBigUInt64LE(num) {
    const hexNumber = jsbi_1.default.BigInt(num)
        .toString(16)
        .slice(0, 16)
        .padStart(16, '0');
    const buffer = hexToByteArray(`0x${hexNumber}`).reverse();
    return byteArrayToHex(buffer);
}
exports.toBigUInt64LE = toBigUInt64LE;
function toBigUInt128LE(u128) {
    const viewRight = toBigUInt64LE(jsbi_1.default.signedRightShift(jsbi_1.default.BigInt(u128), jsbi_1.default.BigInt(64)));
    const viewLeft = toBigUInt64LE(jsbi_1.default.bitwiseAnd(jsbi_1.default.BigInt(u128), jsbi_1.default.BigInt('0xffffffffffffffff')));
    return `${viewLeft}${viewRight.slice(2)}`;
}
exports.toBigUInt128LE = toBigUInt128LE;
function readBigUInt32LE(hex) {
    if (hex.slice(0, 2) !== '0x') {
        throw new Error('hex must start with 0x');
    }
    const dv = new DataView(new ArrayBuffer(4));
    dv.setUint32(0, Number(hex.slice(0, 10)), true);
    return jsbi_1.default.BigInt(dv.getUint32(0, false));
    // return BigInt(dv.getUint32(0, false));
}
exports.readBigUInt32LE = readBigUInt32LE;
function readBigUInt64LE(hex) {
    if (hex.slice(0, 2) !== '0x') {
        throw new Error('hex must start with 0x');
    }
    const buf = hex.slice(2).padEnd(16, 0);
    const viewRight = `0x${buf.slice(0, 8)}`;
    const viewLeft = `0x${buf.slice(8, 16)}`;
    const numLeft = readBigUInt32LE(viewLeft).toString(16).padStart(8, '0');
    const numRight = readBigUInt32LE(viewRight).toString(16).padStart(8, '0');
    return jsbi_1.default.BigInt(`0x${numLeft}${numRight}`);
}
exports.readBigUInt64LE = readBigUInt64LE;
function readBigUInt128LE(hex) {
    if (hex.slice(0, 2) !== '0x') {
        throw new Error('hex must start with 0x');
    }
    const buf = hex.slice(2).padEnd(32, 0);
    const viewRight = `0x${buf.slice(0, 16)}`;
    const viewLeft = `0x${buf.slice(16, 32)}`;
    const numLeft = readBigUInt64LE(viewLeft).toString(16).padStart(16, '0');
    const numRight = readBigUInt64LE(viewRight).toString(16).padStart(16, '0');
    return jsbi_1.default.BigInt(`0x${numLeft}${numRight}`);
}
exports.readBigUInt128LE = readBigUInt128LE;
exports.bnStringToRationalNumber = (bn, decimals, options) => {
    if (!Number.isInteger(decimals) || decimals < 0) {
        throw new Error("value of 'decimals' must be a natural integer");
    }
    const n = new decimal_js_1.default(bn);
    if (n.isNeg()) {
        bn = bn.slice(1);
    }
    let int = bn;
    let dec = '';
    if (decimals > 0) {
        const intLen = bn.length - decimals;
        int = intLen > 0 ? bn.substr(0, intLen) : '0';
        dec = intLen > 0 ? bn.slice(intLen) : `${'0'.repeat(-intLen)}${bn}`;
        dec = new decimal_js_1.default(`0.${dec}`).toFixed().slice(2);
    }
    if (options) {
        if (options.fixed !== undefined) {
            if (!Number.isInteger(options.fixed) ||
                options.fixed < 1
            // || options.fixed > decimals
            ) {
                throw new Error(
                // `value of \'fixed\' must be a positive integer and not bigger than decimals value ${decimals}`
                `value of 'fixed' must be a positive integer`);
            }
            const res = new decimal_js_1.default(`0.${dec}`).toFixed(options.fixed).split('.');
            dec = res[1];
            if (res[0] === '1') {
                int = jsbi_1.default.add(jsbi_1.default.BigInt(int), jsbi_1.default.BigInt(1)).toString();
            }
        }
        else if (options.pad && dec.length < decimals) {
            dec = `${dec}${'0'.repeat(decimals - dec.length)}`;
        }
        if (options.commify) {
            int = int.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
        }
        if (options.section === 'decimal') {
            return dec;
        }
        if (options.section === 'integer') {
            return n.isNeg() ? `-${int}` : int;
        }
    }
    if (n.isNeg()) {
        int = `-${int}`;
    }
    if (dec.length)
        return `${int}.${dec}`;
    return int;
};
function hashData(data) {
    const messageHash = crypto_1.createHash('SHA256')
        .update(data)
        .digest('hex')
        .toString();
    return `0x${messageHash}`;
}
exports.hashData = hashData;
//# sourceMappingURL=data:application/json;base64,