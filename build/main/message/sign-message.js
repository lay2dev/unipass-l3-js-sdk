"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignMessage = void 0;
const __1 = require("..");
const web3_utils_1 = require("web3-utils");
const source = 'unipass-wallet';
class SignMessage {
    constructor(inner) {
        this.inner = inner;
    }
    messageHash() {
        if (!this.inner.pubKey) {
            throw new Error(`SignMessageError: not find pubKey `);
        }
        if (this.inner.action == __1.ActionType.REGISTER) {
            if (!this.inner.registerEmail) {
                throw new Error(`SignMessageError: not find registerEmail `);
            }
            const hash = web3_utils_1.soliditySha3({ v: this.inner.action, t: 'uint8' }, { v: __1.sha256HashData(this.inner.username), t: 'bytes32' }, { v: __1.sha256HashData(this.inner.registerEmail), t: 'bytes32' }, { v: source, t: 'string' });
            return hash;
        }
        else if (this.inner.action == __1.ActionType.ADD_LOCAL_KEY ||
            this.inner.action == __1.ActionType.QUICK_ADD_LOCAL_KEY) {
            if (!this.inner.nonce) {
                throw new Error(`SignMessageError: not find nonce `);
            }
            if (!this.inner.nonce.startsWith('0x')) {
                throw new Error(`SignMessageError: nonce not hex data`);
            }
            const hash = web3_utils_1.soliditySha3({ v: this.inner.action, t: 'uint8' }, { v: __1.sha256HashData(this.inner.registerEmail), t: 'bytes32' }, { v: __1.sha256HashData(this.inner.username), t: 'bytes32' }, { v: __1.sha256HashData(this.inner.nonce), t: 'uint' }, { v: this.inner.keyType, t: 'uint' }, { v: __1.sha256HashData(this.inner.pubKey), t: 'bytes' });
            return hash;
        }
        else if (this.inner.action == __1.ActionType.DEL_LOCAL_KEY) {
            if (!this.inner.nonce) {
                throw new Error(`SignMessageError: not find nonce `);
            }
            if (!this.inner.nonce.startsWith('0x')) {
                throw new Error(`SignMessageError: nonce not hex data`);
            }
            const hash = web3_utils_1.soliditySha3({ v: this.inner.action, t: 'uint8' }, { v: __1.sha256HashData(this.inner.registerEmail), t: 'bytes32' }, { v: __1.sha256HashData(this.inner.username), t: 'bytes32' }, { v: __1.sha256HashData(this.inner.nonce), t: 'uint' }, { v: this.inner.keyType, t: 'uint' }, { v: __1.sha256HashData(this.inner.pubKey), t: 'bytes' });
            return hash;
        }
        else if (this.inner.action == __1.ActionType.UPDATE_RECOVERY_EMAIL) {
            if (!this.inner.nonce || !this.inner.threshold) {
                throw new Error(`SignMessageError: not find nonce or nof find threshold `);
            }
            if (!this.inner.nonce.startsWith('0x')) {
                throw new Error(`SignMessageError: nonce not hex data`);
            }
            const emails = [];
            for (let item of this.inner.recoveryEmail) {
                __1.sha256HashData(item);
                emails.push(item);
            }
            const hash = web3_utils_1.soliditySha3({ v: this.inner.action, t: 'uint8' }, { v: __1.sha256HashData(this.inner.registerEmail), t: 'bytes32' }, { v: __1.sha256HashData(this.inner.username), t: 'bytes32' }, { v: __1.sha256HashData(this.inner.nonce), t: 'uint' }, { v: '0x' + emails.join(), t: 'bytes' }, { v: this.inner.threshold, t: 'uint' });
            return hash;
        }
        else if (this.inner.action == __1.ActionType.UPDATE_QUICK_LOGIN) {
            if (!this.inner.nonce) {
                throw new Error(`SignMessageError: not find nonce `);
            }
            if (!this.inner.nonce.startsWith('0x')) {
                throw new Error(`SignMessageError: nonce not hex data`);
            }
            const hash = web3_utils_1.soliditySha3({ v: this.inner.action, t: 'uint8' }, { v: __1.sha256HashData(this.inner.registerEmail), t: 'bytes32' }, { v: __1.sha256HashData(this.inner.username), t: 'bytes32' }, { v: __1.sha256HashData(this.inner.nonce), t: 'uint' }, { v: Number(this.inner.quickLogin), t: 'bool' });
            return hash;
        }
        else if (this.inner.action == __1.ActionType.START_RECOVERY) {
            if (!this.inner.nonce) {
                throw new Error(`SignMessageError: not find nonce `);
            }
            if (!this.inner.nonce.startsWith('0x')) {
                throw new Error(`SignMessageError: nonce not hex data`);
            }
            const hash = web3_utils_1.soliditySha3({ v: this.inner.action, t: 'uint8' }, { v: __1.sha256HashData(this.inner.registerEmail), t: 'bytes32' }, { v: __1.sha256HashData(this.inner.username), t: 'bytes32' }, { v: __1.sha256HashData(this.inner.nonce), t: 'uint' }, { v: Number(this.inner.resetKeys), t: 'bool' }, { v: this.inner.keyType, t: 'uint' }, { v: __1.sha256HashData(this.inner.pubKey), t: 'bytes' });
            return hash;
        }
        else if (this.inner.action == __1.ActionType.CANCEL_RECOVERY) {
            if (!this.inner.nonce) {
                throw new Error(`SignMessageError: not find nonce `);
            }
            if (!this.inner.nonce.startsWith('0x')) {
                throw new Error(`SignMessageError: nonce not hex data`);
            }
            const hash = web3_utils_1.soliditySha3({ v: this.inner.action, t: 'uint8' }, { v: __1.sha256HashData(this.inner.registerEmail), t: 'bytes32' }, { v: __1.sha256HashData(this.inner.username), t: 'bytes32' }, { v: __1.sha256HashData(this.inner.nonce), t: 'uint' });
            return hash;
        }
        else {
            throw new Error(`SignMessageError: action error`);
        }
    }
}
exports.SignMessage = SignMessage;
//# sourceMappingURL=data:application/json;base64,